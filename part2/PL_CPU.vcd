$date
	Wed Jan 26 00:33:15 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module PL_CPU $end
$var wire 64 ! write_data [63:0] $end
$var wire 64 " sum_data [63:0] $end
$var wire 4 # result [3:0] $end
$var wire 135 $ register4_output [134:0] $end
$var wire 203 % register3_output [202:0] $end
$var wire 272 & register2_output [271:0] $end
$var wire 96 ' register1_output [95:0] $end
$var wire 1 ( reg_write $end
$var wire 64 ) read_data2 [63:0] $end
$var wire 64 * read_data1 [63:0] $end
$var wire 64 + read_data [63:0] $end
$var wire 64 , pcplus4 [63:0] $end
$var wire 64 - out_data [63:0] $end
$var wire 64 . old_pc [63:0] $end
$var wire 64 / new_pc [63:0] $end
$var wire 1 0 mem_write $end
$var wire 1 1 mem_to_reg $end
$var wire 1 2 mem_read $end
$var wire 32 3 instruction [31:0] $end
$var wire 1 4 clk $end
$var wire 1 5 branch $end
$var wire 1 6 alu_zero $end
$var wire 64 7 alu_src_mux_output [63:0] $end
$var wire 1 8 alu_src $end
$var wire 2 9 alu_op [1:0] $end
$var wire 64 : address [63:0] $end
$var reg 1 ; pc_reset $end
$var reg 1 < pc_write $end
$scope module add $end
$var wire 64 = b [63:0] $end
$var wire 64 > sum [63:0] $end
$var wire 64 ? carry [63:0] $end
$var wire 64 @ a [63:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 64 A a [63:0] $end
$var wire 64 B b [63:0] $end
$var wire 64 C sum [63:0] $end
$var wire 64 D carry [63:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 64 E in1 [63:0] $end
$var wire 64 F in2 [63:0] $end
$var wire 4 G alu_c [3:0] $end
$var reg 64 H result [63:0] $end
$var reg 1 6 zero $end
$upscope $end
$scope module aluc $end
$var wire 2 I alu_op [1:0] $end
$var wire 3 J func3 [2:0] $end
$var wire 7 K func7 [6:0] $end
$var reg 12 L a [11:0] $end
$var reg 4 M result [3:0] $end
$upscope $end
$scope module cu $end
$var wire 7 N opcode [6:0] $end
$var reg 2 O alu_op [1:0] $end
$var reg 1 8 alu_src $end
$var reg 1 5 branch $end
$var reg 1 2 mem_read $end
$var reg 1 1 mem_to_reg $end
$var reg 1 0 mem_write $end
$var reg 1 ( reg_write $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 P data_in [31:0] $end
$var wire 1 ; enable $end
$var wire 1 Q read $end
$var wire 64 R address [63:0] $end
$var reg 32 S data_out [31:0] $end
$upscope $end
$scope module mux $end
$var wire 64 T data1 [63:0] $end
$var wire 64 U data2 [63:0] $end
$var wire 1 V s $end
$var reg 64 W data_out [63:0] $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 64 Y data1 [63:0] $end
$var wire 64 Z data2 [63:0] $end
$var wire 1 [ s $end
$var wire 64 \ data_out [63:0] $end
$upscope $end
$scope module mux3 $end
$var wire 64 ] data1 [63:0] $end
$var wire 64 ^ data2 [63:0] $end
$var wire 1 _ s $end
$var wire 64 ` data_out [63:0] $end
$upscope $end
$scope module myclock $end
$var reg 1 4 CLK $end
$upscope $end
$scope module myimmgen $end
$var wire 32 a input1 [31:0] $end
$var reg 64 b output1 [63:0] $end
$upscope $end
$scope module pc $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 1 < Read $end
$var wire 64 c in [63:0] $end
$var reg 64 d memory [63:0] $end
$var reg 64 e out [63:0] $end
$var integer 32 f i [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 5 g read_reg1 [4:0] $end
$var wire 5 h read_reg2 [4:0] $end
$var wire 1 i reg_write $end
$var wire 64 j write_data [63:0] $end
$var wire 5 k write_reg [4:0] $end
$var reg 64 l read_data1 [63:0] $end
$var reg 64 m read_data2 [63:0] $end
$var integer 32 n k [31:0] $end
$upscope $end
$scope module register1 $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 1 < Read $end
$var wire 96 o in [95:0] $end
$var reg 96 p memory [95:0] $end
$var reg 96 q out [95:0] $end
$upscope $end
$scope module register2 $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 1 < Read $end
$var wire 272 r in [271:0] $end
$var reg 272 s memory [271:0] $end
$var reg 272 t out [271:0] $end
$upscope $end
$scope module register3 $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 1 < Read $end
$var wire 203 u in [202:0] $end
$var reg 203 v memory [202:0] $end
$var reg 203 w out [202:0] $end
$upscope $end
$scope module register4 $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 1 < Read $end
$var wire 135 x in [134:0] $end
$var reg 135 y memory [134:0] $end
$var reg 135 z out [134:0] $end
$upscope $end
$scope module uut $end
$var wire 1 4 Clk $end
$var wire 1 ; En $end
$var wire 64 { address [63:0] $end
$var wire 1 | memRead $end
$var wire 1 } memWrite $end
$var wire 64 ~ write_data [63:0] $end
$var reg 64 !" read_data [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !"
bx ~
x}
x|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b1000000 n
bx m
bx l
bx k
bx j
xi
bx h
bx g
b0 f
bx e
bx d
b0 c
bx b
bx a
bx `
x_
bx ^
bx ]
bx \
x[
bx Z
bx Y
b1 X
b0 W
xV
bx U
bx T
bx S
bx R
1Q
b0 P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx00 ?
bx >
b100 =
1<
1;
bx :
bx 9
x8
bx 7
x6
x5
04
bx 3
x2
x1
x0
b0 /
bx .
bx -
bx ,
bx +
bx *
bx )
x(
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#20
b0 ?
b11 X
bx /
bx W
bx c
b100 ,
b100 >
b100 T
b1010010101000000011 3
b1010010101000000011 S
b1 f
b1010010101000000011 o
b0 .
b0 @
b0 R
b0 e
14
#40
04
#60
bx00 ?
b100 X
b0 #
b0 G
b0 M
bx0000000 L
b0 9
b0 O
1(
18
00
11
12
05
b0 -
b0 b
bx ,
bx >
bx T
b0 K
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000000000000000000000000001010100 r
b11 N
b1010010101000000011 a
b0 h
b1010 g
bx 3
bx S
bx00000000000001010010101000000011 '
bx00000000000001010010101000000011 q
b10 f
bx o
bx .
bx @
bx R
bx e
14
#80
04
#100
b0 D
b0 7
b0 F
b0 \
b10 #
b10 G
b10 M
b10xxxxxxx L
bx K
bx N
bx a
bx h
bx g
b11010xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx10100 u
1[
b0 Z
b0 I
b10 J
b0 A
b11 f
bx '
bx q
b0 )
b0 m
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000xxxxxxxx r
b0 *
b0 l
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000000000000000000000000001010100 &
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000000000000000000000000000000000000000000000001010100 t
14
#120
04
#140
b101 X
0V
b0xxxxxxxxxx L
b11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx10100 x
0}
1|
b11010xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx u
bx J
b11010xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx10100 %
b11010xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx10100 w
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000000000000000000000000000000000000000000000000000xxxxxxxx &
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000000000000000000000000000000000000000000000000000xxxxxxxx t
bx )
bx m
b11010001xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000000000000000000000000000000000000000000000000000xxxxxxxx r
bx *
bx l
b100 f
14
#160
04
#180
b11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x
1_
1i
b10100 k
b101 f
b11010xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
b11010xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx w
b11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx10100 $
b11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx10100 z
14
#200
04
#220
bx k
b11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx $
b11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx z
b110 f
14
#240
04
#260
b111 f
14
#280
04
#300
b1000 f
14
#320
04
#340
b1001 f
14
#360
04
#380
b1010 f
14
#400
04
#420
b1011 f
14
#440
04
