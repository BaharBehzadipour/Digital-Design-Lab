$date
	Sun Jan 23 13:47:10 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Risc_v $end
$var wire 64 ! new_pc [63:0] $end
$var wire 64 " write_data [63:0] $end
$var wire 64 # sum_data [63:0] $end
$var wire 4 $ result [3:0] $end
$var wire 1 % reg_write $end
$var wire 64 & read_data2 [63:0] $end
$var wire 64 ' read_data1 [63:0] $end
$var wire 64 ( read_data [63:0] $end
$var wire 64 ) pcplus4 [63:0] $end
$var wire 64 * out_data [63:0] $end
$var wire 64 + old_pc [63:0] $end
$var wire 1 , mem_write $end
$var wire 1 - mem_to_reg $end
$var wire 1 . mem_read $end
$var wire 64 / instruction [63:0] $end
$var wire 1 0 clk $end
$var wire 1 1 branch $end
$var wire 1 2 alu_zero $end
$var wire 64 3 alu_src_mux_output [63:0] $end
$var wire 1 4 alu_src $end
$var wire 2 5 alu_op [1:0] $end
$var wire 64 6 address [63:0] $end
$var reg 1 7 pc_reset $end
$var reg 1 8 pc_write $end
$scope module add $end
$var wire 64 9 b [63:0] $end
$var wire 64 : sum [63:0] $end
$var wire 64 ; carry [63:0] $end
$var wire 64 < a [63:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 64 = sum [63:0] $end
$var wire 64 > carry [63:0] $end
$var wire 64 ? b [63:0] $end
$var wire 64 @ a [63:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk1[10] $end
$upscope $end
$scope begin genblk1[11] $end
$upscope $end
$scope begin genblk1[12] $end
$upscope $end
$scope begin genblk1[13] $end
$upscope $end
$scope begin genblk1[14] $end
$upscope $end
$scope begin genblk1[15] $end
$upscope $end
$scope begin genblk1[16] $end
$upscope $end
$scope begin genblk1[17] $end
$upscope $end
$scope begin genblk1[18] $end
$upscope $end
$scope begin genblk1[19] $end
$upscope $end
$scope begin genblk1[20] $end
$upscope $end
$scope begin genblk1[21] $end
$upscope $end
$scope begin genblk1[22] $end
$upscope $end
$scope begin genblk1[23] $end
$upscope $end
$scope begin genblk1[24] $end
$upscope $end
$scope begin genblk1[25] $end
$upscope $end
$scope begin genblk1[26] $end
$upscope $end
$scope begin genblk1[27] $end
$upscope $end
$scope begin genblk1[28] $end
$upscope $end
$scope begin genblk1[29] $end
$upscope $end
$scope begin genblk1[30] $end
$upscope $end
$scope begin genblk1[31] $end
$upscope $end
$scope begin genblk1[32] $end
$upscope $end
$scope begin genblk1[33] $end
$upscope $end
$scope begin genblk1[34] $end
$upscope $end
$scope begin genblk1[35] $end
$upscope $end
$scope begin genblk1[36] $end
$upscope $end
$scope begin genblk1[37] $end
$upscope $end
$scope begin genblk1[38] $end
$upscope $end
$scope begin genblk1[39] $end
$upscope $end
$scope begin genblk1[40] $end
$upscope $end
$scope begin genblk1[41] $end
$upscope $end
$scope begin genblk1[42] $end
$upscope $end
$scope begin genblk1[43] $end
$upscope $end
$scope begin genblk1[44] $end
$upscope $end
$scope begin genblk1[45] $end
$upscope $end
$scope begin genblk1[46] $end
$upscope $end
$scope begin genblk1[47] $end
$upscope $end
$scope begin genblk1[48] $end
$upscope $end
$scope begin genblk1[49] $end
$upscope $end
$scope begin genblk1[50] $end
$upscope $end
$scope begin genblk1[51] $end
$upscope $end
$scope begin genblk1[52] $end
$upscope $end
$scope begin genblk1[53] $end
$upscope $end
$scope begin genblk1[54] $end
$upscope $end
$scope begin genblk1[55] $end
$upscope $end
$scope begin genblk1[56] $end
$upscope $end
$scope begin genblk1[57] $end
$upscope $end
$scope begin genblk1[58] $end
$upscope $end
$scope begin genblk1[59] $end
$upscope $end
$scope begin genblk1[60] $end
$upscope $end
$scope begin genblk1[61] $end
$upscope $end
$scope begin genblk1[62] $end
$upscope $end
$scope begin genblk1[63] $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 64 A in2 [63:0] $end
$var wire 64 B in1 [63:0] $end
$var wire 4 C alu_c [3:0] $end
$var reg 64 D result [63:0] $end
$var reg 1 2 zero $end
$upscope $end
$scope module aluc $end
$var wire 3 E func3 [2:0] $end
$var wire 7 F func7 [6:0] $end
$var wire 2 G alu_op [1:0] $end
$var reg 12 H a [11:0] $end
$var reg 4 I result [3:0] $end
$upscope $end
$scope module cu $end
$var wire 7 J opcode [6:0] $end
$var reg 2 K alu_op [1:0] $end
$var reg 1 4 alu_src $end
$var reg 1 1 branch $end
$var reg 1 . mem_read $end
$var reg 1 - mem_to_reg $end
$var reg 1 , mem_write $end
$var reg 1 % reg_write $end
$upscope $end
$scope module instruction_memory $end
$var wire 64 L data_in [63:0] $end
$var wire 1 7 enable $end
$var wire 1 M read $end
$var wire 1 0 clk $end
$var wire 64 N address [63:0] $end
$var reg 64 O data_out [63:0] $end
$upscope $end
$scope module mux $end
$var wire 64 P data1 [63:0] $end
$var wire 64 Q data2 [63:0] $end
$var wire 64 R data_out [63:0] $end
$var wire 1 S s $end
$upscope $end
$scope module mux2 $end
$var wire 1 4 s $end
$var wire 64 T data_out [63:0] $end
$var wire 64 U data2 [63:0] $end
$var wire 64 V data1 [63:0] $end
$upscope $end
$scope module mux3 $end
$var wire 64 W data2 [63:0] $end
$var wire 1 - s $end
$var wire 64 X data_out [63:0] $end
$var wire 64 Y data1 [63:0] $end
$upscope $end
$scope module myclock $end
$var reg 1 0 CLK $end
$upscope $end
$scope module myimmgen $end
$var wire 64 Z input1 [63:0] $end
$var reg 64 [ output1 [63:0] $end
$upscope $end
$scope module pc $end
$var wire 1 0 Clk $end
$var wire 1 7 En $end
$var wire 1 8 Read $end
$var wire 64 \ in [63:0] $end
$var reg 64 ] memory [63:0] $end
$var reg 64 ^ out [63:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 0 Clk $end
$var wire 1 7 En $end
$var wire 5 _ read_reg1 [4:0] $end
$var wire 5 ` read_reg2 [4:0] $end
$var wire 1 % reg_write $end
$var wire 64 a write_data [63:0] $end
$var wire 5 b write_reg [4:0] $end
$var reg 64 c read_data1 [63:0] $end
$var reg 64 d read_data2 [63:0] $end
$var integer 32 e k [31:0] $end
$upscope $end
$scope module uut $end
$var wire 1 0 Clk $end
$var wire 1 7 En $end
$var wire 64 f address [63:0] $end
$var wire 1 . memRead $end
$var wire 1 , memWrite $end
$var wire 64 g write_data [63:0] $end
$var reg 64 h read_data [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h
bx g
bx f
b1000000 e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
xS
bx R
bx Q
bx P
bx O
bx N
1M
b0 L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx00 ;
bx :
b100 9
x8
x7
bx 6
bx 5
x4
bx 3
x2
x1
00
bx /
x.
x-
x,
bx +
bx *
bx )
bx (
bx '
bx &
x%
bx $
bx #
bx "
bx !
$end
#20
08
07
10
#40
18
17
00
#60
08
10
#80
00
